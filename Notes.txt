1. npm init will intialize the npm application with default package.json and create src folder under root
2. npm i -D webpack webpack-cli, these dependecies are used for webpack bundling the project.
3. add "build": "webpack --mode production" in package.json scripts section. When we run
npm run build, webpack  bundles the js files into dist folder.

4. add index.js with alert("Hello World") under src folder

run npm run build : will see the dist folder with index.js files

5. inordere to run above js  file, we need html file so we need to install html-webpack-plugin
npm i -D html-webpack-plugin

6. html-webpack-plugin bundles the html file and add our index.js file to build folder

7. for that purpose, we need webapck.config.js file

  const HtmlWebPackPlugin = require('HtmlWebPackPlugin');

  module.exports = {
      plugins: [
            new HtmlWebpackPlugin({
            template: './src/index.html',
            filename: 'index.html',
    }),
  ],

  };

8. we need to add webpack-dev-server dev depenedency for pick up changes dynamically and run webapck server wehn development

9.  npm i -D webpack-dev-server
10. add this command under scripts in package.json

   "start": "webpack-dev-server --mode --open development"

   ******NOTE****
   new command
    "dev": "webpack serve --mode development --env development",
    "start": "webpack serve --mode development --env development"


   Type Script configurations


   TypeScript files --

   There are two popular options  that compile type script files in webpack project.

   1. ts-loader
   2. babel-loader + preset-typescript


   set up typescript

   1. npm i -D ts-loader

   2. create tsconfig.json in root folder

    {
      "comipilerOptions": {
        "target": "es6", / / compile ts code to es6 version code
        "module": "es6", // .ts files -> webapck -> ts-loader -> webpack -> bundle
        "strict": true // noImplicitAny, noImplictThis alwaysStrict, strictBindCallApply, strictNullChecks, strictFunctionTypes, StrictPropertInitialiization

      } 
    }


    change index.js files to index.ts

    3. modify  webpack.config.js to compile ts fiels 

    const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  entry: "./src/index.ts",  // starting file
  resolve: { // ts compiler compilers all files with thes extensions
    extensions: ['.js', '.ts', '.tsx']
  },
  module:{
    rules:[{
      test: /\.tsx?$/,
      loader: 'ts-loader' or 'babel-loader', // what type of loader , that we configue with webpack for typescript
      exclude: '/node_modules/' // exclude node_modules for ts compilaytion
    }]
  },
  plugins: [
    new HtmlWebpackPlugin({ // plugin for injecting js files into html files
      template: './src/index.html', // what html file that we need to run finally
      filename: 'index.html', // final file name that will generate in dist folder by webpack
    }),
  ],
};


how to setup typescript project in webpack using babel loader

1. npm i -D @babel/core @babel/preset-env @babel/preset-typescript

@babel/preset-env is allows us to use latest js features without installing any plugins
@babel/preset-typescript is used for remove types from typescript files and run ts files

2. create .bablerc and register above presets in it.

{
  "presets": ["@babel/preset-env", "@babel/preset-typescript"]
}
// first @babel/preset-typescript removes the types from ts files and @babel/preset-env prepares the target env and browsers

3.  lets tell webpack use babel loader to process ts files.

npm i -D babel-loader

4. replace babel-loader  with ts-loader in webpack.config.js

5. to  beable to use type script syntax that allows us to use intialize object properties at the time of
definitiomn which is part of the class fields proposal

we need to install below plugin

class A {
  greeting = "Hello World";
}

console.log(new A().greeting);

this syntax works fine with type script but babel gives us an error.

so we need to intialize the value in the constuctor

class A {
  greeting = "Hello World";
  constuctor() {
    this.greeting = "Hello World";
  }
}

console.log(new A().greeting);

so for this reason we need below plugin
npm i -D @babel/plugin-proposal-class-properties

and add it to the babel config in .babelrc file
{
    "presets": ["@babel/preset-env", "@babel/preset-typescript"],
    "plugins": ["@babel/plugin-proposal-class-properties"]
}

